<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<Class name="CLM.Utils">
<Super>CLM.Common</Super>
<TimeCreated>63714,61614.83778</TimeCreated>

<Property name="Namespace">
<Type>%String</Type>
</Property>

<Method name="GetGlobalStructure">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&parameters:%String,*result:%RegisteredObject,global:%String=$$$MessageDictionaryGlobal]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set result = ##class(%ZEN.proxyObject).%New()
	set domain = ""
	while(1) {
		set domain = $ORDER(@global@(domain))
		if (domain = "") {
			quit
		}
		set language = ""
		set languageList = ##class(%ListOfDataTypes).%New()
		while (1)
		{
			set language = $ORDER(@global@(domain, language))
			if (language = "") {
				quit
			}
			do languageList.Insert(language)
		}
		set $PROPERTY(result, domain) = languageList 
	}
	return $$$OK
]]></Implementation>
</Method>

<Method name="GetMessageList">
<ClassMethod>1</ClassMethod>
<FormalSpec>domain:%String,language:%String,global:%String=$$$MessageDictionaryGlobal</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set result = ##class(%ListOfObjects).%New()
	
	set id = ""
	while (1) {
		set id = $ORDER(@global@(domain, language, id))
		if (id = "") {
			quit
		}
		set message = ##class(%ZEN.proxyObject).%New()
		set message.id = id
		set message.text = (@global@(domain, language, id))
		do result.Insert(message)
	}
	return ##class(%ZEN.Auxiliary.jsonProvider).%ObjectToJSON(result,,,..#FormatJSON)
]]></Implementation>
</Method>

<Method name="GetNamespaceList">
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
 do ##class(%SYS.Namespace).ListAll(.r)
 set result = ##class(%ListOfObjects).%New()
 set nsNext=""
 for  {
	 set nsNext=$Order(r(nsNext))
	 quit:nsNext=""
	 set message = ##class(%ZEN.proxyObject).%New()
	 set message.namespace = nsNext
	 do result.Insert(message)
 }
 return ##class(%ZEN.Auxiliary.jsonProvider).%ObjectToJSON(result,,,..#FormatJSON)
]]></Implementation>
</Method>

<Method name="PutMessage">
<ClassMethod>1</ClassMethod>
<FormalSpec>domain:%String,language:%String,id:%String,text:%String,global:%String=$$$MessageDictionaryGlobal</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set @global@(domain, language, id) = text
	return $$$OK
]]></Implementation>
</Method>

<Method name="PostMessages">
<ClassMethod>1</ClassMethod>
<FormalSpec>domain:%String,messages:%ListOfDataTypes,global:%String=$$$MessageDictionaryGlobal</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set st = $$$OK
	set language =  @global@(domain)
	
	for i=1:1:messages.Count() {
		set stmsg = ..PostMessage(domain, language, messages.GetAt(i),global)
		set st = $$$ADDSC(st,stmsg)		
	}
	return st
]]></Implementation>
</Method>

<Method name="PostMessage">
<ClassMethod>1</ClassMethod>
<FormalSpec>domain:%String,language:%String,text:%String,global:%String=$$$MessageDictionaryGlobal</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set id = $ZCRC(text,7)
	return:$DATA(@global@(domain, language, id))=1 $$$OK
	return ..PutMessage(domain, language, id, text, global)
]]></Implementation>
</Method>

<Method name="CheckMessages">
<ClassMethod>1</ClassMethod>
<FormalSpec>domain:%String,language:%String,global:%String=$$$MessageDictionaryGlobal</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set result = ##class(%ListOfObjects).%New()
	set speller = ##class(CLM.SpellChecker).%New(..GetSetting("CNAPath"), ..GetSetting("hunspellPath"),..GetSetting("libcPath"), language,..GetSetting("affPath"),..GetSetting("dicPath"))
	
	set id = ""
	while (1) {
		set id = $ORDER(@global@(domain, language, id))
		if (id = "") {
			quit
		}
		set text = @global@(domain, language, id)
		if (speller.CheckString(text, .mistakes) > 0) {
			set message = ##class(%ZEN.proxyObject).%New()
			set message.id = id
			set message.text = text
			for i=0:1:mistakes.Count()
			{
				set word = mistakes.GetAt(i)
				set suglist = speller.Suggest(word)
				do mistakes.SetAt(##class(%List).LogicalToXSD(suglist),i)
			}
			set message.mistakes = mistakes
			do result.Insert(message)
		}
	}	
	return ##class(%ZEN.Auxiliary.jsonProvider).%ObjectToJSON(result,,,..#FormatJSON)
]]></Implementation>
</Method>

<Method name="ChangeNamespace">
<ClassMethod>1</ClassMethod>
<FormalSpec>namespace:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[ Set ^["USER"]NameSpace = "^["""_namespace_"""]CacheMsg"
]]></Implementation>
</Method>

<Method name="AddNewLocalization">
<ClassMethod>1</ClassMethod>
<FormalSpec>origin:%String,language:%String,domain:%String,global:%String=$$$MessageDictionaryGlobal</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set request = ##class(%Net.HttpRequest).%New()
	set request.SSLConfiguration = ..GetSetting("SSLConfig")
	set request.Https = 1
	set request.Server = "translate.yandex.net"
	set request.Location = "api/v1.5/tr.json/translate"
	set key = ..GetSetting("yandexkey")
	
	do request.InsertParam("key", key)
	do request.InsertParam("lang", origin _ "-" _ language)
	
	set path = $NAME(@global@(domain, origin))
	$$$FOREACH(key,value,path)
		do request.InsertParam("text", @value)	
	$$$ENDFOR
	
	set status = request.Get(,1)
	if ($$$ISERR(status)) {
		return status
	}
	do request.HttpResponse.OutputToDevice()
	
	set response =  request.HttpResponse.Data.Read()
	set object = ##class(%ZEN.proxyObject).%New()
	do ##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject(response, , .object)
	
	set list = object.text
	
	set index = 1
	$$$FOREACH(key,value,path)
		set @global@(domain, language, key) = list.GetAt(index)
		set index = index + 1
	$$$ENDFOR
	return status
]]></Implementation>
</Method>

<Method name="DeleteLanguage">
<ClassMethod>1</ClassMethod>
<FormalSpec>domain:%String,language:%String,global:%String=$$$MessageDictionaryGlobal</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	return:'##class(CLM.Utils).DomainExists(domain) $$$ERROR($$$GeneralError,"Domain " _ domain _ " does not exist")
	return:'##class(CLM.Utils).LanguageExists(domain,language) $$$ERROR($$$GeneralError,"Language " _ language _ " does not exist")
	
	kill @global@(domain,language)
	
	return $$$OK
]]></Implementation>
</Method>

<Method name="DomainExists">
<ClassMethod>1</ClassMethod>
<CodeMode>expression</CodeMode>
<FormalSpec>domain:%String,global:%String=$$$MessageDictionaryGlobal</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[''$DATA(@global@(domain))
]]></Implementation>
</Method>

<Method name="LanguageExists">
<ClassMethod>1</ClassMethod>
<CodeMode>expression</CodeMode>
<FormalSpec>domain:%String,language:%String,global:%String=$$$MessageDictionaryGlobal</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[''$DATA(@global@(domain,language))
]]></Implementation>
</Method>
</Class>
</Export>
