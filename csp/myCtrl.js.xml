<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<CSP name="myCtrl.js" application="/csp/clm/" default="1"><![CDATA[

app.controller("myCtrl", function($scope, $http, Notification, $filter) {

	window.s = $scope
	var init = function () {
		var w = window.location;
		var wNamespace = w.pathname.slice(4, -10);
		$scope.url = w.protocol + "//" + w.host + wNamespace;
		$scope.selectedLanguage = "en";
		$scope.selectedLanguage2 = "en";
		$scope.getNamespaces();
		$scope.isSpellCheck = false;
		$scope.lastDomain = "";
		$scope.isTwoTables = false;
		$scope.yandexLanguagesList = {
            sq: "Albanian",
            ar: "Arabian",
            hy: "Armenian",
            az: "Azeri",
            be: "Belarusian", 
            bs: "Bosnian",
            eu: "Basque",
            bg: "Bulgarian",
            ca: "Catalan",
            hr: "Croatian",
            cs: "Czech",
            zh: "Chinese",
            da: "Danish",
            nl: "Dutch",
            en: "English",
            et: "Estonian",
            eo: "Esperanto",
            fi: "Finnish",
            fr: "French",
            ka: "Georgian",
            de: "German",
            el: "Greek",
            he: "Hebrew",
            hu: "Hungarian",
            is: "Icelandic",
            id: "Indonesian",
            it: "Italian",
            ja: "Japanese",
            kk: "Kazan",
            ko: "Korean",
            la: "Latin",
            lv: "Latvian",
            lt: "Lithuanian",
            mk: "Macedonian",
            ms: "Malay",
            mt: "Maltese",
            no: "Norwegian",
            pl: "Polish",
            pt: "Portuguese Brazil",
            ro: "Romanian",
            ru: "Russian",
            es: "Spanish",
            sr: "Serbian",
            sk: "Slovak",
            sl: "Slovenian",
            sv: "Swedish",
            th: "Thai",
            tr: "Turkish",
            uk: "Ukrainian",
            vi: "Vietnamese"
		};
		$scope.getDomains();
		$scope.getCurrentNamespace();
	};

// start of getters - http get functions
	$scope.getDomains = function () {
		$http.get($scope.url + '/domains').
		then(function (response) {
			$scope.domains = response.data;
			if ($scope.lastDomain === "") {				
				$scope.domain = Object.keys($scope.domains)[0];
			} else {
				$scope.domain = $scope.lastDomain;
			}
			$scope.domainClicked($scope.domain);
		}, function myError(response){
			notifications.showError({
				message: 'domains weren\'t downloaded',
				hideDelay: 1500,
				hide: true});

			setTimeout('document.getElementsByClassName("message")[0].click();', 3000);
		});
	};

	$scope.getMessages = function (domain, language) {
		$http.get($scope.url + '/messages?domain=' + domain + '&language=' + language + '&spellcheck=false').
		then(function (response) {
			$scope.isSpellCheck = false;
			$scope.messages = response.data;
		}, function myError(response){
			notifications.showError({
				message: 'messages weren\'t downloaded',
				hideDelay: 1500,
				hide: true});

			setTimeout('document.getElementsByClassName("message")[0].click();', 3000);
		});
	};

	$scope.getMessages2 = function (domain, language) {
		$http.get($scope.url + '/messages?domain=' + domain + '&language=' + language + '&spellcheck=false').
		then(function (response) {
			$scope.isSpellCheck = false;
			$scope.messages2 = response.data;
		}, function myError(response){
			notifications.showError({
				message: 'messages weren\'t downloaded',
				hideDelay: 1500,
				hide: true});

			setTimeout('document.getElementsByClassName("message")[0].click();', 3000);
		});
	};

	$scope.getMistakes = function () {
		$http.get(encodeURI($scope.url + '/messages?domain=' + $scope.domain + '&language=' + $scope.selectedLanguage + '&spellcheck=true')).
		then(function (response) {
			$scope.isSpellCheck = true;
			$scope.messages = response.data;
			Notification.success('mistakes are listed below');

			setTimeout('document.getElementsByClassName("message")[0].click();', 3000);
		}, function myError(response){
			notifications.showError({
				message: 'mistakes weren\'t downloaded',
				hideDelay: 1500,
				hide: true});

			setTimeout('document.getElementsByClassName("message")[0].click();', 3000);
		});
	}

	$scope.getNamespaces = function () {
		$http.get(encodeURI($scope.url + '/namespaces')).
		then(function (response) {
			$scope.namespaces = response.data.namespace;
			$scope.getCurrentNamespace();
			if (!$scope.currentNamespace){
				$scope.currentNamespace = $scope.namespaces[0];
				$scope.getDomains();
				$scope.changeNamespace($scope.currentNamespace);
			}
			$scope.update
		}, function myError(response){
			notifications.showError({
				message: 'namespaces weren\'t downloaded',
				hideDelay: 1500,
				hide: true});

			setTimeout('document.getElementsByClassName("message")[0].click();', 3000);
		});
	}

	$scope.exportMessages = function () {
		$http.get(encodeURI($scope.url + '/export/' + $scope.domain + '/' + $scope.selectedLanguage)).
		then(function (response) {
			location.href = encodeURI($scope.url + '/export/' + $scope.domain + '/' + $scope.selectedLanguage); 
		}, function myError(response){
			notifications.showError({
				message: 'Wasn\'t possible to export messages.',
				hideDelay: 1500,
				hide: true});

			setTimeout('document.getElementsByClassName("message")[0].click();', 3000);
		});
	};

	$scope.getCurrentNamespace = function () {
		$http.get(encodeURI($scope.url + '/current-namespace')).
		then(function (response) {
			$scope.currentNamespace = response.data.Ð¡urrentNS;
		}, function myError(response){
			notifications.showError({
				message: 'current namespace wasn\'t downloaded',
				hideDelay: 1500,
				hide: true});

			setTimeout('document.getElementsByClassName("message")[0].click();', 3000);
		});
	};

// end of getters - http get functions

// start of http post/put functions

	$scope.postAddNewLocalization = function (domain, languageFrom, languageTo) {

		$http.post($scope.url +  '/add-new-localization?domain=' + domain + "&from=" + languageFrom + '&to=' + languageTo).
		then(function (response) {
			Notification.success($scope.yandexLanguagesList[languageTo] + ' was successfully added to ' + domain + ' domain!');

			setTimeout('document.getElementsByClassName("message")[0].click();', 3000);
			$scope.getDomains();
			$scope.domainClicked(domain);
			$scope.language = languageTo;
		}, function myError(response){
			Notification.error('New Localization Was Not Added.');

			setTimeout('document.getElementsByClassName("message")[0].click();', 3000);
		});
	};

	$scope.putUpdateMessage = function (domain, language, id, text) {
		$http.put(encodeURI($scope.url + '/messages?domain=' + domain + '&language=' + language + '&id=' + id + '&text=' + text)).
		then(function (response) {
			Notification.success(text + ' was successfully replaced into ' + domain + ' domain!');
			setTimeout('document.getElementsByClassName("message")[0].click();', 3000);
		}, function myError(response){
			Notification.error('message was not updated.');
			setTimeout('document.getElementsByClassName("message")[0].click();', 3000);
		});
	};

	$scope.uploadFile = function(){
		var file = $scope.myFile;

		var uploadUrl = $scope.url + "/import";
		$http.post(uploadUrl, file)
		.success(function(){
			Notification.success('was imported!');

			setTimeout('document.getElementsByClassName("message")[0].click();', 3000);
			init();
		})
		.error(function(){
			Notification.error('was not imported.');

			setTimeout('document.getElementsByClassName("message")[0].click();', 3000);
		});
	};

	$scope.changeNamespace = function (selectedNamespace) {
		$http.post($scope.url +  '/namespace/' + selectedNamespace).
		then(function (response) {
			Notification.success('namespaces has been changed to ' + selectedNamespace);

			setTimeout('document.getElementsByClassName("message")[0].click();', 3000);
			init();
			$scope.currentNamespace = selectedNamespace;
		}, function myError(response){
			Notification.error('Namespace was not changed.');

			setTimeout('document.getElementsByClassName("message")[0].click();', 3000);
		});
	};


// end of http post/put functions


// start of clicks listeners

	$scope.domainClicked = function (domain) {
		$scope.selectedLanguage = $scope.domains[domain][0];
		$scope.selectedLanguage2 = $scope.domains[domain][0];
		$scope.oneTableClicked();
		$scope.domain = domain;
		$scope.getMessages(domain, $scope.selectedLanguage);
		$scope.getMessages2(domain, $scope.selectedLanguage);
	};

	$scope.addNewLocalizationClicked = function () {
		$('.ui.modal.addNewLocalization').modal('show');
	};

	$scope.keyPressed = function (event, text, id) {
		if (event.keyCode == '13') {
			event.preventDefault();
			document.activeElement.blur();
		}
	};

	$scope.importMessagesClicked = function () {
		$('.ui.modal.importMessages').modal('show');
	};

	$scope.setPathClicked = function () {
		$('.ui.modal.setPath').modal('show');
		$scope.getPaths();

	};

	$scope.setPath = function () {
		$http.get(encodeURI($scope.url + '/paths?CNAPath=' + $scope.paths.CNAPath 
								+ '&libcPath=' + $scope.paths.libcPath 
								+ '&hunspellPath=' + $scope.paths.hunspellPath
								+ '&dicPath=' + $scope.paths.dicPath
								+ '&affPath=' + $scope.paths.affPath
								+ '&yandexkey=' + $scope.paths.yandexkey)).
		then(function (response) {
			Notification.success('All path were set');

			setTimeout('document.getElementsByClassName("message")[0].click();', 3000);
		}, function myError(response){
			Notification.error('Ops. something went wrong, please try again');
			setTimeout('document.getElementsByClassName("message")[0].click();', 3000);
		});
	};

	$scope.getPaths = function () {
		$http.get(encodeURI($scope.url + '/get-paths')).
		then(function (response) {
			$scope.paths = response.data[0];
		}, function myError(response){
			Notification.error('Oops. something went wrong, please try again');

			setTimeout('document.getElementsByClassName("message")[0].click();', 3000);
		});		
	}
// end of clicks listeners


	$scope.updateMessage = function (event, text, id, language) {
		if (text !== event.target.textContent){
			$scope.putUpdateMessage($scope.domain, language, id, event.target.textContent);
		}
	};

	$scope.setLanguage = function (language) {
		$scope.selectedLanguage = language;
		$scope.getMessages($scope.domain, language);
	};

	$scope.setLanguage2 = function (language) {
		$scope.selectedLanguage2 = language;
		$scope.getMessages2($scope.domain, language);
	};


	$scope.oneTableClicked = function () {
		$scope.isTwoTables = false;
		$scope.selectedLanguage2 = $scope.selectedLanguage;
	};

	$scope.twoTablesClicked = function () {
		$scope.isTwoTables = true;
		$scope.getMessages2($scope.domain, $scope.selectedLanguage2);
	};	

	$scope.deleteThisLanguage = function () {
		$http.get(encodeURI($scope.url + '/delete-language/' + $scope.domain + '/' + $scope.selectedLanguage)).
		then(function (response) {
			$scope.lastDomain = $scope.domain;
			$scope.getDomains();
			Notification.success($scope.yandexLanguagesList[$scope.selectedLanguage] + ' was deleted from ' + $scope.domain);

			setTimeout('document.getElementsByClassName("message")[0].click();', 3000);
		}, function myError(response){
			Notification.error('current language wasn\'t deleted');
			
			setTimeout('document.getElementsByClassName("message")[0].click();', 3000);
		});
	};

	$(window).scroll(function() {

		if ($(this).scrollTop()>200)
		{
			$('#scrollTopButton').fadeIn();
		}
		else
		{
			$('#scrollTopButton').fadeOut();
		}
	});


	init();


});

]]></CSP>
</Export>
